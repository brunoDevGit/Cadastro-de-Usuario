{"version":3,"sources":["components/template/Logo.jsx","components/template/Footer.jsx","components/template/Nav.jsx","components/template/Header.jsx","components/template/Main.jsx","components/home/Home.jsx","components/user/UserCrud.jsx","main/Routes.jsx","main/App.jsx","serviceWorker.js","index.js"],"names":["props","className","to","icon","href","title","subtitle","Fragment","children","headerProps","baseUrl","initialState","user","name","email","whatsapp","list","UserCrud","state","axios","then","resp","setState","data","this","method","id","url","getUpdatedList","add","filter","u","unshift","event","target","value","type","onChange","e","updateField","placeholder","onClick","save","delete","renderRows","map","key","load","remove","renderForm","renderTable","Component","exact","path","component","Home","from","Routes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.036ce01e.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Logo.css'\r\nimport { Link } from 'react-router-dom'\r\nexport default props =>\r\n\r\n    <aside className=\"logo\">\r\n        <Link to=\"/\" className=\"logo\">\r\n\r\n            <i className={`logoStyle fa fa-${props.icon}`}></i>\r\n        </Link>\r\n    </aside>","import React from 'react'\r\n\r\nimport './Footer.css'\r\n\r\nexport default props => \r\n\r\n<footer className=\"footer\">\r\n    <span>\r\n    Desenvolvido por <i className=\"fa fa-tree text-primary\"> <a  href=\"http://brunodevgit.github.io/\">brnApps</a> </i>\r\n    </span>\r\n</footer>","import React from 'react'\r\n\r\nimport './Nav.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default props =>\r\n\r\n    <aside className=\"menu-area\">\r\n        <nav className=\"menu\">\r\n            <Link to=\"/\">\r\n                <i className=\"fa fa-home\"><b /> Início</i>\r\n            </Link>\r\n            <Link to=\"/users\">\r\n                <i className=\"fa fa-users\"><b /> Usuários</i>\r\n            </Link>\r\n        </nav>\r\n    </aside>","import React from 'react'\r\n\r\nimport './Header.css'\r\n\r\nexport default props =>\r\n\r\n    <header className=\"header d-none d-sm-flex flex-column\">\r\n        <h1 className=\"mt-3\">\r\n        <i className={` fa fa-${props.icon}`}></i>\r\n            {props.title}\r\n        </h1>\r\n        <p className=\"lead text-muted\">{props.subtitle}</p>\r\n\r\n    </header>","import './Main.css'\r\nimport React from 'react'\r\nimport Header from './Header'\r\n\r\n\r\n\r\nexport default props =>\r\n<React.Fragment>\r\n    <Header {...props}/>\r\n    <main className= \"content container-fluid\">\r\n   \r\n        <div className=\"p-3 mt-3\">\r\n            {props.children}\r\n        </div>\r\n    </main>\r\n</React.Fragment>\r\n","import React from 'react'\r\nimport Main from '../template/Main'\r\n\r\n\r\nexport default props =>\r\n\r\n    <Main title=\"Início\"\r\n        subtitle=\"Crud com React\"\r\n        icon=\"home\">\r\n            \r\n        <div className=\"display-4 \">Bem vindo</div>\r\n        <hr />\r\n        <p className=\"mb-0\"> Esse é um exemplo de cadastro de usuários com React. </p>\r\n\r\n    </Main>\r\n","import React, { Component } from 'react'\r\nimport Main from '../template/Main'\r\nimport axios from 'axios'\r\n\r\nconst headerProps = {\r\n    icon: 'users',\r\n    title: ' Usuários',\r\n    subtitle: 'Cadastro de usuários: Incluir, Listar, Alterar e Excluir'\r\n}\r\n\r\nconst baseUrl = 'http://localhost:3001/users'\r\nconst initialState = {\r\n    user: { name: '', email: '', whatsapp: '' },\r\n    list: []\r\n}\r\n\r\nexport default class UserCrud extends Component {\r\n\r\n    state = { ...initialState }\r\n\r\n    componentWillMount() {\r\n        axios(baseUrl).then(resp => {\r\n            this.setState({list: resp.data})\r\n        } )\r\n    }\r\n\r\n    clear() {\r\n        this.setState({ user: initialState.user })\r\n    }\r\n    save() {\r\n        const user = this.state.user\r\n        const method = user.id ? 'put' : 'post'\r\n        const url = user.id ? `${baseUrl}/${user.id}` : baseUrl\r\n        axios[method](url, user)\r\n            .then(resp => {\r\n                const list = this.getUpdatedList(resp.data)\r\n                this.setState({ user: initialState.user, list })\r\n            })\r\n    }\r\n    getUpdatedList(user,  add = true) {\r\n        const list = this.state.list.filter(u => u.id !== user.id)\r\n        if(add) list.unshift(user)\r\n        return list\r\n    }\r\n    //clone o estado do objeto e evoluindo\r\n    updateField(event) {\r\n        const user = { ...this.state.user }\r\n        user[event.target.name] = event.target.value\r\n        this.setState({ user })\r\n    }\r\n    renderForm() {\r\n        return (\r\n            <div className=\"form\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 col-md-6\">\r\n                        <div className=\"form-group\">\r\n                            <label>Nome</label>\r\n                            <input type=\"text\" className=\"form-control\"\r\n                                name=\"name\"\r\n                                value={this.state.user.name}\r\n                                onChange={e => this.updateField(e)}\r\n                                placeholder=\"Digite o nome...\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-6\">\r\n                        <div className=\"form-group\">\r\n                            <label>Email</label>\r\n                            <input type=\"text\" className=\"form-control\"\r\n                                name=\"email\"\r\n                                value={this.state.user.email}\r\n                                onChange={e => this.updateField(e)}\r\n                                placeholder=\"Digite o email...\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-6\">\r\n                        <div className=\"form-group\">\r\n                            <label>Whatsapp</label>\r\n                            <input type=\"text\" className=\"form-control\"\r\n                                name=\"whatsapp\"\r\n                                value={this.state.user.whatsapp}\r\n                                onChange={e => this.updateField(e)}\r\n                                placeholder=\"Digite o whatsapp...\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <hr />\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 d-flex content-end\">\r\n                        <button className=\"btn btn-primary\"\r\n                            onClick={e => this.save(e)}>\r\n                            Salvar\r\n                       </button>\r\n                        <button className=\"btn btn-secondary ml-2\"\r\n                            onClick={e => this.save(e)}>\r\n                            Cancelar\r\n                       </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    load(user) {\r\n        this.setState({user})\r\n    }\r\n    remove(user) {\r\n        axios.delete(`${baseUrl}/${user.id}`).then(resp => {\r\n            const list = this.getUpdatedList(user, false)\r\n            this.setState({list})\r\n        })\r\n    }\r\n    renderTable() {\r\n        return (\r\n            <table className=\"table mt-4\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Nome</th>\r\n                        <th>Email</th>\r\n                        <th>Whatsapp</th>\r\n                    </tr>\r\n                </thead>\r\n            \r\n            <tbody>\r\n                {this.renderRows()}\r\n            </tbody>\r\n            </table>\r\n        )\r\n    }\r\n    renderRows() {\r\n        return this.state.list.map(user => {\r\n            return (\r\n                <tr key={user.id}>\r\n                    <td>{user.name}</td>\r\n                    <td>{user.email}</td>\r\n                    <td>{user.whatsapp}</td>\r\n                    <td>\r\n                        <button className=\"btn btn-info\"\r\n                        onClick={() => this.load(user)}>\r\n                            <i className=\"fa fa-pencil\"></i>\r\n                        </button>\r\n                        <button className=\"btn btn-warning ml-2\"\r\n                        onClick={() => this.remove(user)}>\r\n                            <i className=\"fa fa-trash\"></i>\r\n                        </button>\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <Main {...headerProps}>\r\n                {this.renderForm()}\r\n                {this.renderTable()}\r\n            </Main>\r\n        )\r\n\r\n    }}","import React from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router'\r\n\r\nimport Home from '../components/home/Home'\r\nimport UserCrud from '../components/user/UserCrud'\r\n\r\nexport default props =>\r\n    <Switch>\r\n        <Route exact path='/' component={Home} />\r\n        <Route path='/users' component={UserCrud} />\r\n        <Redirect from='*' to='/' />\r\n    </Switch>","import React from 'react'\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport \"font-awesome/css/font-awesome.min.css\"\r\nimport './App.css'\r\nimport { HashRouter } from 'react-router-dom'\r\nimport Logo from '../components/template/Logo'\r\nimport Footer from '../components/template/Footer'\r\nimport Nav from '../components/template/Nav'\r\nimport Routes from './Routes'\r\n\r\nexport default props =>\r\n      <HashRouter>\r\n            <div className=\"app\">\r\n                  <Logo icon=\"users\" />\r\n                  <Nav />\r\n                  <Routes />\r\n                  <Footer />\r\n            </div>\r\n      </HashRouter>\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from '../src/main/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}